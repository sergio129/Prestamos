name: Deploy to AWS EC2

on:
  push:
    branches:
      - master  # o la rama que uses

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Save private key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem
          ls -la ssh_key.pem

      - name: Debug connection values
        run: |
          echo "Verificando secretos (sin mostrar valores sensibles)"
          if [ -z "${{ secrets.AWS_USER }}" ]; then echo "ERROR: AWS_USER está vacío"; else echo "AWS_USER está configurado"; fi
          if [ -z "${{ secrets.AWS_HOST }}" ]; then echo "ERROR: AWS_HOST está vacío"; else echo "AWS_HOST está configurado"; fi

      - name: Set deployment variables
        env:
          EC2_USER: ec2-user
          EC2_HOST: 18.191.186.71
        run: |
          echo "AWS_USER=${EC2_USER}" >> $GITHUB_ENV
          echo "AWS_HOST=${EC2_HOST}" >> $GITHUB_ENV
          echo "Usando valores predeterminados: ${EC2_USER}@${EC2_HOST}"

      - name: Install essential tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync openssh-client

      - name: Copy project to EC2
        run: |
          echo "Copiando archivos a ${{ env.AWS_USER }}@${{ env.AWS_HOST }}..."
          mkdir -p ~/.ssh
          ssh-keyscan ${{ env.AWS_HOST }} >> ~/.ssh/known_hosts
          scp -v -i ssh_key.pem -o StrictHostKeyChecking=no -r ./* ${{ env.AWS_USER }}@${{ env.AWS_HOST }}:~/temp_update

      - name: Run deploy commands on EC2
        run: |
          ssh -v -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.AWS_USER }}@${{ env.AWS_HOST }} << 'EOF'
            set -e
            echo "Respaldando versión actual..."
            mkdir -p ~/Prestamos_backup_$(date +%Y%m%d%H%M%S)
            cp -r ~/Prestamos/* ~/Prestamos_backup_$(date +%Y%m%d%H%M%S)/ || true
            
            echo "Actualizando archivos..."
            mkdir -p ~/Prestamos
            rm -rf ~/Prestamos/*
            cp -r ~/temp_update/* ~/Prestamos/
            
            echo "Reconstruyendo contenedores Docker..."
            cd ~/Prestamos
            docker-compose down
            docker-compose up -d --build
            docker ps
          EOF
